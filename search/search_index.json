{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"c_api/","title":"API Reference","text":""},{"location":"c_api/#header-files","title":"Header files","text":"<ul> <li>test_comp/include/comp1.h</li> <li>test_comp/include/comp2.h</li> </ul>"},{"location":"c_api/#file-test_compincludecomp1h","title":"File test_comp/include/comp1.h","text":"<p>This is a test file for comp1.</p> <p>To use this driver:</p> <ul> <li>include this file in your project</li> <li>print() is a function that prints \"Hello World!\"</li> </ul>"},{"location":"c_api/#structures-and-types","title":"Structures and Types","text":"Type Name struct comp1 struct comp typedef int comp1_int typedef int for comp union union_comp1 it's a union!!!"},{"location":"c_api/#functions","title":"Functions","text":"Type Name void add (comp1 a, comp1 b) print the added result void print (void) print function"},{"location":"c_api/#macros","title":"Macros","text":"Type Name define TEST_FOO  111;THIS IS TEST_FOO VARIABLE!"},{"location":"c_api/#structures-and-types-documentation","title":"Structures and Types Documentation","text":""},{"location":"c_api/#struct-comp1","title":"struct <code>comp1</code>","text":"<p>struct comp</p> <p>Variables:</p> <ul> <li> <p>int bar  </p> </li> <li> <p>int foo  ??? foo?</p> </li> </ul>"},{"location":"c_api/#typedef-comp1_int","title":"typedef <code>comp1_int</code>","text":"<p>typedef int for comp</p> <pre><code>typedef int comp1_int;\n</code></pre>"},{"location":"c_api/#union-union_comp1","title":"union <code>union_comp1</code>","text":"<p>it's a union!!!</p> <p>Variables:</p> <ul> <li> <p>comp1 a  </p> </li> <li> <p>comp1 b  </p> </li> </ul>"},{"location":"c_api/#functions-documentation","title":"Functions Documentation","text":""},{"location":"c_api/#function-add","title":"function <code>add</code>","text":"<p>print the added result</p> <pre><code>void add (\n    comp1 a,\n    comp1 b\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>a</code> aaa </li> <li><code>b</code> bbb</li> </ul>"},{"location":"c_api/#function-print","title":"function <code>print</code>","text":"<p>print function</p> <pre><code>void print (\n    void\n) \n</code></pre>"},{"location":"c_api/#macros-documentation","title":"Macros Documentation","text":""},{"location":"c_api/#define-test_foo","title":"define <code>TEST_FOO</code>","text":"<p>THIS IS TEST_FOO VARIABLE!</p> <pre><code>#define TEST_FOO 111;\n</code></pre>"},{"location":"c_api/#file-test_compincludecomp2h","title":"File test_comp/include/comp2.h","text":""},{"location":"c_api/#structures-and-types_1","title":"Structures and Types","text":"Type Name enum DAY struct comp2 struct comp2 typedef int comp2_int typedef int for comp"},{"location":"c_api/#functions_1","title":"Functions","text":"Type Name void add (int a, int b) print the added result void print (void) print function"},{"location":"c_api/#structures-and-types-documentation_1","title":"Structures and Types Documentation","text":""},{"location":"c_api/#enum-day","title":"enum <code>DAY</code>","text":"<pre><code>enum DAY {\n    MON = 1,\n    TUE,\n    WED,\n    THU,\n    FRI,\n    SAT,\n    SUN\n};\n</code></pre>"},{"location":"c_api/#struct-comp2","title":"struct <code>comp2</code>","text":"<p>struct comp2</p> <p>Variables:</p> <ul> <li> <p>int bar  </p> </li> <li> <p>int foo  </p> </li> </ul>"},{"location":"c_api/#typedef-comp2_int","title":"typedef <code>comp2_int</code>","text":"<p>typedef int for comp</p> <pre><code>typedef int comp2_int;\n</code></pre>"},{"location":"c_api/#functions-documentation_1","title":"Functions Documentation","text":""},{"location":"c_api/#function-add_1","title":"function <code>add</code>","text":"<p>print the added result</p> <pre><code>void add (\n    int a,\n    int b\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>a</code> a </li> <li><code>b</code> b</li> </ul>"},{"location":"c_api/#function-print_1","title":"function <code>print</code>","text":"<p>print function</p> <pre><code>void print (\n    void\n) \n</code></pre>"},{"location":"cpp_api/","title":"API Reference","text":""},{"location":"cpp_api/#header-files","title":"Header files","text":"<ul> <li>src/animal.h</li> <li>src/animal_interface.h</li> <li>src/bird.h</li> <li>src/config.h</li> <li>src/example.h</li> <li>src/special_bird.h</li> <li>src/utils/exception.h</li> </ul>"},{"location":"cpp_api/#file-srcanimalh","title":"File src/animal.h","text":""},{"location":"cpp_api/#namespaces","title":"Namespaces","text":"Type Name namespace example namespace inner_namespace"},{"location":"cpp_api/#classes","title":"Classes","text":"Type Name class Animal Base class for all animals from which Bird derives. struct Result Some random inner class of Animal. class Vector"},{"location":"cpp_api/#functions","title":"Functions","text":"Type Name void some_global_function (example::Animal *animal) Some random global function that modifies Animal."},{"location":"cpp_api/#namespaces-documentation","title":"Namespaces Documentation","text":""},{"location":"cpp_api/#namespace-example","title":"namespace <code>example</code>","text":""},{"location":"cpp_api/#namespace-exampleinner_namespace","title":"namespace <code>example::inner_namespace</code>","text":""},{"location":"cpp_api/#classes-documentation","title":"Classes Documentation","text":""},{"location":"cpp_api/#class-exampleanimal","title":"class <code>example::Animal</code>","text":"<p>Base class for all animals from which Bird derives.</p> <p>Lorem Ipsum Donor. Some Random link with bold and_italics_ And the following is a<code>typewritter</code> font.</p> <p>Example code:</p> <pre><code>Animal animal = Animal(\"Hello World\", nullptr, nullptr);\nstd::cout &lt;&lt; animal.get_name() &lt;&lt; std::endl;\n</code></pre> <p>See also: Bird</p> <p>Bug</p> <p>Some random bug </p> <p>Note:</p> <p>Some random note </p> <p>Warning:</p> <p>Some random warning </p> <p>Test</p> <p>Some random test description </p> <p>Todo</p> <p>Some random todo </p> <p>Template parameters:</p> <ul> <li><code>T</code> Some random template paramater description which actually does not exist in the code! </li> </ul> <p>Precondition:</p> <p>First initialize the system. </p> <p>Date:</p> <p>2017-2018 </p> <p>Author:</p> <p>Matus Novak </p> <p>Author:</p> <p>Hello World</p> <p>Variables:</p> <ul> <li> <p>Animal * father  The pointer to the father.Can be null!</p> </li> <li> <p>Animal * mother  The pointer to the mother.Can be null!</p> </li> <li> <p>std::string name  </p> </li> </ul>"},{"location":"cpp_api/#struct-exampleanimalresult","title":"struct <code>example::Animal::Result</code>","text":"<p>Some random inner class of Animal.</p> <p>Variables:</p> <ul> <li> <p>const Animal * father   = = nullptr</p> </li> <li> <p>const Animal * mother   = = nullptr</p> </li> <li> <p>const std::string name  </p> </li> <li> <p>const Type type   = = Type::NONE</p> </li> </ul>"},{"location":"cpp_api/#class-exampleinner_namespacevector","title":"class <code>example::inner_namespace::Vector</code>","text":"<p>Variables:</p> <ul> <li> <p>int x  </p> </li> <li> <p>int y  </p> </li> <li> <p>int z  </p> </li> </ul>"},{"location":"cpp_api/#functions-documentation","title":"Functions Documentation","text":""},{"location":"cpp_api/#function-some_global_function","title":"function <code>some_global_function</code>","text":"<p>Some random global function that modifies Animal.</p> <pre><code>void some_global_function (\n    example::Animal *animal\n) \n</code></pre> <p>See also: Animal </p> <p>Parameters:</p> <ul> <li><code>animal</code> The pointer to the animal instance</li> </ul>"},{"location":"cpp_api/#file-srcanimal_interfaceh","title":"File src/animal_interface.h","text":""},{"location":"cpp_api/#namespaces_1","title":"Namespaces","text":"Type Name namespace example"},{"location":"cpp_api/#classes_1","title":"Classes","text":"Type Name interface AnimalInterface"},{"location":"cpp_api/#namespaces-documentation_1","title":"Namespaces Documentation","text":""},{"location":"cpp_api/#namespace-example_1","title":"namespace <code>example</code>","text":""},{"location":"cpp_api/#classes-documentation_1","title":"Classes Documentation","text":""},{"location":"cpp_api/#interface-exampleanimalinterface","title":"interface <code>example::AnimalInterface</code>","text":""},{"location":"cpp_api/#file-srcbirdh","title":"File src/bird.h","text":""},{"location":"cpp_api/#namespaces_2","title":"Namespaces","text":"Type Name namespace example"},{"location":"cpp_api/#classes_2","title":"Classes","text":"Type Name class Bird"},{"location":"cpp_api/#namespaces-documentation_2","title":"Namespaces Documentation","text":""},{"location":"cpp_api/#namespace-example_2","title":"namespace <code>example</code>","text":""},{"location":"cpp_api/#classes-documentation_2","title":"Classes Documentation","text":""},{"location":"cpp_api/#class-examplebird","title":"class <code>example::Bird</code>","text":""},{"location":"cpp_api/#file-srcconfigh","title":"File src/config.h","text":"<p>This is a config file.</p> <p>This is a detailed description</p>"},{"location":"cpp_api/#macros","title":"Macros","text":"Type Name define CONFIG_HELLO  (123) define CONFIG_WORLD  (\"abx\") define PI  3.14159265358979323846 define PRINT_PRETTY (MSG, ...) printf(MSG, __VA_ARGS__)"},{"location":"cpp_api/#macros-documentation","title":"Macros Documentation","text":""},{"location":"cpp_api/#define-config_hello","title":"define <code>CONFIG_HELLO</code>","text":"<pre><code>#define CONFIG_HELLO (123)\n</code></pre>"},{"location":"cpp_api/#define-config_world","title":"define <code>CONFIG_WORLD</code>","text":"<pre><code>#define CONFIG_WORLD (\"abx\")\n</code></pre>"},{"location":"cpp_api/#define-pi","title":"define <code>PI</code>","text":"<pre><code>#define PI 3.14159265358979323846\n</code></pre>"},{"location":"cpp_api/#define-print_pretty","title":"define <code>PRINT_PRETTY</code>","text":"<pre><code>#define PRINT_PRETTY (\n    MSG,\n    ...\n) printf(MSG, __VA_ARGS__)\n</code></pre>"},{"location":"cpp_api/#file-srcexampleh","title":"File src/example.h","text":""},{"location":"cpp_api/#file-srcspecial_birdh","title":"File src/special_bird.h","text":""},{"location":"cpp_api/#namespaces_3","title":"Namespaces","text":"Type Name namespace example"},{"location":"cpp_api/#classes_3","title":"Classes","text":"Type Name class SpecialBird"},{"location":"cpp_api/#namespaces-documentation_3","title":"Namespaces Documentation","text":""},{"location":"cpp_api/#namespace-example_3","title":"namespace <code>example</code>","text":""},{"location":"cpp_api/#classes-documentation_3","title":"Classes Documentation","text":""},{"location":"cpp_api/#class-examplespecialbird","title":"class <code>example::SpecialBird</code>","text":""},{"location":"cpp_api/#file-srcutilsexceptionh","title":"File src/utils/exception.h","text":""},{"location":"cpp_api/#namespaces_4","title":"Namespaces","text":"Type Name namespace example"},{"location":"cpp_api/#classes_4","title":"Classes","text":"Type Name class CustomException class NumericException"},{"location":"cpp_api/#namespaces-documentation_4","title":"Namespaces Documentation","text":""},{"location":"cpp_api/#namespace-example_4","title":"namespace <code>example</code>","text":""},{"location":"cpp_api/#classes-documentation_4","title":"Classes Documentation","text":""},{"location":"cpp_api/#class-examplecustomexception","title":"class <code>example::CustomException</code>","text":"<p>Variables:</p> <ul> <li>std::string msg  </li> </ul>"},{"location":"cpp_api/#class-examplenumericexception","title":"class <code>example::NumericException</code>","text":"<p>Variables:</p> <ul> <li>std::string msg  </li> </ul>"}]}